# docker-compose.prod.yml - Production blue-green deployment setup
version: '3.8'

services:
  # Blue environment
  app-blue:
    image: ghcr.io/marlinjai/sharons-website:${APP_VERSION:-latest}
    container_name: sharons-website-blue
    ports:
      - "3001:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - APP_VERSION=${APP_VERSION:-latest}
      - DEPLOYMENT_SLOT=blue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  # Green environment
  app-green:
    image: ghcr.io/marlinjai/sharons-website:${APP_VERSION:-latest}
    container_name: sharons-website-green
    ports:
      - "3002:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - APP_VERSION=${APP_VERSION:-latest}
      - DEPLOYMENT_SLOT=green
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  # Nginx load balancer
  nginx:
    image: nginx:alpine
    container_name: sharons-website-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app-blue
      - app-green
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge 