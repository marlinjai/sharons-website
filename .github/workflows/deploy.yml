# .github/workflows/deploy.yml - Automated blue-green deployment workflow
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sharons-website

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: marlinjai
          password: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/marlinjai/sharons-website
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # Copy deployment files to server
          scp -r nginx scripts docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:~/sharons-website/
          
          # Execute deployment
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd ~/sharons-website
            
            # Login to GitHub Container Registry
            echo ${{ secrets.PERSONAL_GITHUB_TOKEN }} | docker login ghcr.io -u marlinjai --password-stdin
            
            # Create .env file with environment variables
            echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" > .env
            echo "RESEND_AUDIENCE_ID=${{ secrets.RESEND_AUDIENCE_ID }}" >> .env
            echo "FROM_EMAIL=${{ secrets.FROM_EMAIL }}" >> .env
            echo "TO_EMAIL=${{ secrets.TO_EMAIL }}" >> .env
            
            # Run deployment script with SSL enabled
            chmod +x scripts/deploy.sh
            APP_VERSION=latest ./scripts/deploy.sh deploy latest true
          EOF

      - name: Verify deployment
        run: |
          # Wait for deployment to stabilize
          sleep 30
          
          # Check if the application is responding
          if curl -f -s "http://${{ secrets.SERVER_HOST }}/health"; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment verification failed"
            exit 1
          fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "üöÄ Deployment to production was successful!"
          # Add your notification logic here (Slack, Discord, email, etc.)

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "üí• Deployment to production failed!"
          # Add your notification logic here (Slack, Discord, email, etc.) 